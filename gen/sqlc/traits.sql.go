// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: traits.sql

package sqlc

import (
	"context"
)

const createClothing = `-- name: CreateClothing :one
INSERT INTO clothing (
    clothing
) VALUES (
    ?
)
RETURNING clothing_id, clothing
`

func (q *Queries) CreateClothing(ctx context.Context, clothing string) (Clothing, error) {
	row := q.db.QueryRowContext(ctx, createClothing, clothing)
	var i Clothing
	err := row.Scan(&i.ClothingID, &i.Clothing)
	return i, err
}

const createFace = `-- name: CreateFace :one
INSERT INTO face (
    face
) VALUES (
    ?
)
RETURNING face_id, face
`

func (q *Queries) CreateFace(ctx context.Context, face string) (Face, error) {
	row := q.db.QueryRowContext(ctx, createFace, face)
	var i Face
	err := row.Scan(&i.FaceID, &i.Face)
	return i, err
}

const createHair = `-- name: CreateHair :one
INSERT INTO hair (
    hair
) VALUES (
    ?
)
RETURNING hair_id, hair
`

func (q *Queries) CreateHair(ctx context.Context, hair string) (Hair, error) {
	row := q.db.QueryRowContext(ctx, createHair, hair)
	var i Hair
	err := row.Scan(&i.HairID, &i.Hair)
	return i, err
}

const createMisfortune = `-- name: CreateMisfortune :one
INSERT INTO misfortune (
    misfortune
) VALUES (
    ?
)
RETURNING misfortune_id, misfortune
`

func (q *Queries) CreateMisfortune(ctx context.Context, misfortune string) (Misfortune, error) {
	row := q.db.QueryRowContext(ctx, createMisfortune, misfortune)
	var i Misfortune
	err := row.Scan(&i.MisfortuneID, &i.Misfortune)
	return i, err
}

const createPhysique = `-- name: CreatePhysique :one
INSERT INTO physique (
    physique
) VALUES (
    ?
)
RETURNING physique_id, physique
`

func (q *Queries) CreatePhysique(ctx context.Context, physique string) (Physique, error) {
	row := q.db.QueryRowContext(ctx, createPhysique, physique)
	var i Physique
	err := row.Scan(&i.PhysiqueID, &i.Physique)
	return i, err
}

const createReputation = `-- name: CreateReputation :one
INSERT INTO reputation (
    reputation
) VALUES (
    ?
)
RETURNING reputation_id, reputation
`

func (q *Queries) CreateReputation(ctx context.Context, reputation string) (Reputation, error) {
	row := q.db.QueryRowContext(ctx, createReputation, reputation)
	var i Reputation
	err := row.Scan(&i.ReputationID, &i.Reputation)
	return i, err
}

const createSkin = `-- name: CreateSkin :one
INSERT INTO skin (
    skin
) VALUES (
    ?
)
RETURNING skin_id, skin
`

func (q *Queries) CreateSkin(ctx context.Context, skin string) (Skin, error) {
	row := q.db.QueryRowContext(ctx, createSkin, skin)
	var i Skin
	err := row.Scan(&i.SkinID, &i.Skin)
	return i, err
}

const createSpeech = `-- name: CreateSpeech :one
INSERT INTO speech (
    speech
) VALUES (
    ?
)
RETURNING speech_id, speech
`

func (q *Queries) CreateSpeech(ctx context.Context, speech string) (Speech, error) {
	row := q.db.QueryRowContext(ctx, createSpeech, speech)
	var i Speech
	err := row.Scan(&i.SpeechID, &i.Speech)
	return i, err
}

const createVice = `-- name: CreateVice :one
INSERT INTO vice (
    vice
) VALUES (
    ?
)
RETURNING vice_id, vice
`

func (q *Queries) CreateVice(ctx context.Context, vice string) (Vice, error) {
	row := q.db.QueryRowContext(ctx, createVice, vice)
	var i Vice
	err := row.Scan(&i.ViceID, &i.Vice)
	return i, err
}

const createVirtue = `-- name: CreateVirtue :one
INSERT INTO virtue (
    virtue
) VALUES (
    ?
)
RETURNING virtue_id, virtue
`

func (q *Queries) CreateVirtue(ctx context.Context, virtue string) (Virtue, error) {
	row := q.db.QueryRowContext(ctx, createVirtue, virtue)
	var i Virtue
	err := row.Scan(&i.VirtueID, &i.Virtue)
	return i, err
}

const deleteClothing = `-- name: DeleteClothing :exec
DELETE FROM clothing
WHERE clothing_id = ?
`

func (q *Queries) DeleteClothing(ctx context.Context, clothingID int64) error {
	_, err := q.db.ExecContext(ctx, deleteClothing, clothingID)
	return err
}

const deleteFace = `-- name: DeleteFace :exec
DELETE FROM face
WHERE face_id = ?
`

func (q *Queries) DeleteFace(ctx context.Context, faceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFace, faceID)
	return err
}

const deleteHair = `-- name: DeleteHair :exec
DELETE FROM hair
WHERE hair_id = ?
`

func (q *Queries) DeleteHair(ctx context.Context, hairID int64) error {
	_, err := q.db.ExecContext(ctx, deleteHair, hairID)
	return err
}

const deleteMisfortune = `-- name: DeleteMisfortune :exec
DELETE FROM misfortune
WHERE misfortune_id = ?
`

func (q *Queries) DeleteMisfortune(ctx context.Context, misfortuneID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMisfortune, misfortuneID)
	return err
}

const deletePhysique = `-- name: DeletePhysique :exec
DELETE FROM physique
WHERE physique_id = ?
`

func (q *Queries) DeletePhysique(ctx context.Context, physiqueID int64) error {
	_, err := q.db.ExecContext(ctx, deletePhysique, physiqueID)
	return err
}

const deleteReputation = `-- name: DeleteReputation :exec
DELETE FROM reputation
WHERE reputation_id = ?
`

func (q *Queries) DeleteReputation(ctx context.Context, reputationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteReputation, reputationID)
	return err
}

const deleteSkin = `-- name: DeleteSkin :exec
DELETE FROM skin
WHERE skin_id = ?
`

func (q *Queries) DeleteSkin(ctx context.Context, skinID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSkin, skinID)
	return err
}

const deleteSpeech = `-- name: DeleteSpeech :exec
DELETE FROM speech
WHERE speech_id = ?
`

func (q *Queries) DeleteSpeech(ctx context.Context, speechID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSpeech, speechID)
	return err
}

const deleteVice = `-- name: DeleteVice :exec
DELETE FROM vice
WHERE vice_id = ?
`

func (q *Queries) DeleteVice(ctx context.Context, viceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteVice, viceID)
	return err
}

const deleteVirtue = `-- name: DeleteVirtue :exec
DELETE FROM virtue
WHERE virtue_id = ?
`

func (q *Queries) DeleteVirtue(ctx context.Context, virtueID int64) error {
	_, err := q.db.ExecContext(ctx, deleteVirtue, virtueID)
	return err
}

const getClothing = `-- name: GetClothing :one
SELECT clothing_id, clothing FROM clothing
WHERE clothing_id = ? LIMIT 1
`

func (q *Queries) GetClothing(ctx context.Context, clothingID int64) (Clothing, error) {
	row := q.db.QueryRowContext(ctx, getClothing, clothingID)
	var i Clothing
	err := row.Scan(&i.ClothingID, &i.Clothing)
	return i, err
}

const getFace = `-- name: GetFace :one
SELECT face_id, face FROM face
WHERE face_id = ? LIMIT 1
`

func (q *Queries) GetFace(ctx context.Context, faceID int64) (Face, error) {
	row := q.db.QueryRowContext(ctx, getFace, faceID)
	var i Face
	err := row.Scan(&i.FaceID, &i.Face)
	return i, err
}

const getHair = `-- name: GetHair :one
SELECT hair_id, hair FROM hair
WHERE hair_id = ? LIMIT 1
`

func (q *Queries) GetHair(ctx context.Context, hairID int64) (Hair, error) {
	row := q.db.QueryRowContext(ctx, getHair, hairID)
	var i Hair
	err := row.Scan(&i.HairID, &i.Hair)
	return i, err
}

const getMisfortune = `-- name: GetMisfortune :one
SELECT misfortune_id, misfortune FROM misfortune
WHERE misfortune_id = ? LIMIT 1
`

func (q *Queries) GetMisfortune(ctx context.Context, misfortuneID int64) (Misfortune, error) {
	row := q.db.QueryRowContext(ctx, getMisfortune, misfortuneID)
	var i Misfortune
	err := row.Scan(&i.MisfortuneID, &i.Misfortune)
	return i, err
}

const getPhysique = `-- name: GetPhysique :one
SELECT physique_id, physique FROM physique
WHERE physique_id = ? LIMIT 1
`

func (q *Queries) GetPhysique(ctx context.Context, physiqueID int64) (Physique, error) {
	row := q.db.QueryRowContext(ctx, getPhysique, physiqueID)
	var i Physique
	err := row.Scan(&i.PhysiqueID, &i.Physique)
	return i, err
}

const getRandomClothing = `-- name: GetRandomClothing :one
SELECT clothing_id, clothing FROM clothing
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomClothing(ctx context.Context) (Clothing, error) {
	row := q.db.QueryRowContext(ctx, getRandomClothing)
	var i Clothing
	err := row.Scan(&i.ClothingID, &i.Clothing)
	return i, err
}

const getRandomFace = `-- name: GetRandomFace :one
SELECT face_id, face FROM face
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomFace(ctx context.Context) (Face, error) {
	row := q.db.QueryRowContext(ctx, getRandomFace)
	var i Face
	err := row.Scan(&i.FaceID, &i.Face)
	return i, err
}

const getRandomHair = `-- name: GetRandomHair :one
SELECT hair_id, hair FROM hair
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomHair(ctx context.Context) (Hair, error) {
	row := q.db.QueryRowContext(ctx, getRandomHair)
	var i Hair
	err := row.Scan(&i.HairID, &i.Hair)
	return i, err
}

const getRandomMisfortune = `-- name: GetRandomMisfortune :one
SELECT misfortune_id, misfortune FROM misfortune
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomMisfortune(ctx context.Context) (Misfortune, error) {
	row := q.db.QueryRowContext(ctx, getRandomMisfortune)
	var i Misfortune
	err := row.Scan(&i.MisfortuneID, &i.Misfortune)
	return i, err
}

const getRandomPhysique = `-- name: GetRandomPhysique :one
SELECT physique_id, physique FROM physique
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomPhysique(ctx context.Context) (Physique, error) {
	row := q.db.QueryRowContext(ctx, getRandomPhysique)
	var i Physique
	err := row.Scan(&i.PhysiqueID, &i.Physique)
	return i, err
}

const getRandomReputation = `-- name: GetRandomReputation :one
SELECT reputation_id, reputation FROM reputation
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomReputation(ctx context.Context) (Reputation, error) {
	row := q.db.QueryRowContext(ctx, getRandomReputation)
	var i Reputation
	err := row.Scan(&i.ReputationID, &i.Reputation)
	return i, err
}

const getRandomSkin = `-- name: GetRandomSkin :one
SELECT skin_id, skin FROM skin
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomSkin(ctx context.Context) (Skin, error) {
	row := q.db.QueryRowContext(ctx, getRandomSkin)
	var i Skin
	err := row.Scan(&i.SkinID, &i.Skin)
	return i, err
}

const getRandomSpeech = `-- name: GetRandomSpeech :one
SELECT speech_id, speech FROM speech
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomSpeech(ctx context.Context) (Speech, error) {
	row := q.db.QueryRowContext(ctx, getRandomSpeech)
	var i Speech
	err := row.Scan(&i.SpeechID, &i.Speech)
	return i, err
}

const getRandomVice = `-- name: GetRandomVice :one
SELECT vice_id, vice FROM vice
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomVice(ctx context.Context) (Vice, error) {
	row := q.db.QueryRowContext(ctx, getRandomVice)
	var i Vice
	err := row.Scan(&i.ViceID, &i.Vice)
	return i, err
}

const getRandomVirtue = `-- name: GetRandomVirtue :one
SELECT virtue_id, virtue FROM virtue
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomVirtue(ctx context.Context) (Virtue, error) {
	row := q.db.QueryRowContext(ctx, getRandomVirtue)
	var i Virtue
	err := row.Scan(&i.VirtueID, &i.Virtue)
	return i, err
}

const getReputation = `-- name: GetReputation :one
SELECT reputation_id, reputation FROM reputation
WHERE reputation_id = ? LIMIT 1
`

func (q *Queries) GetReputation(ctx context.Context, reputationID int64) (Reputation, error) {
	row := q.db.QueryRowContext(ctx, getReputation, reputationID)
	var i Reputation
	err := row.Scan(&i.ReputationID, &i.Reputation)
	return i, err
}

const getSkin = `-- name: GetSkin :one
SELECT skin_id, skin FROM skin
WHERE skin_id = ? LIMIT 1
`

func (q *Queries) GetSkin(ctx context.Context, skinID int64) (Skin, error) {
	row := q.db.QueryRowContext(ctx, getSkin, skinID)
	var i Skin
	err := row.Scan(&i.SkinID, &i.Skin)
	return i, err
}

const getSpeech = `-- name: GetSpeech :one
SELECT speech_id, speech FROM speech
WHERE speech_id = ? LIMIT 1
`

func (q *Queries) GetSpeech(ctx context.Context, speechID int64) (Speech, error) {
	row := q.db.QueryRowContext(ctx, getSpeech, speechID)
	var i Speech
	err := row.Scan(&i.SpeechID, &i.Speech)
	return i, err
}

const getVice = `-- name: GetVice :one
SELECT vice_id, vice FROM vice
WHERE vice_id = ? LIMIT 1
`

func (q *Queries) GetVice(ctx context.Context, viceID int64) (Vice, error) {
	row := q.db.QueryRowContext(ctx, getVice, viceID)
	var i Vice
	err := row.Scan(&i.ViceID, &i.Vice)
	return i, err
}

const getVirtue = `-- name: GetVirtue :one
SELECT virtue_id, virtue FROM virtue
WHERE virtue_id = ? LIMIT 1
`

func (q *Queries) GetVirtue(ctx context.Context, virtueID int64) (Virtue, error) {
	row := q.db.QueryRowContext(ctx, getVirtue, virtueID)
	var i Virtue
	err := row.Scan(&i.VirtueID, &i.Virtue)
	return i, err
}

const listClothing = `-- name: ListClothing :many
SELECT clothing_id, clothing FROM clothing
ORDER BY clothing
`

func (q *Queries) ListClothing(ctx context.Context) ([]Clothing, error) {
	rows, err := q.db.QueryContext(ctx, listClothing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Clothing
	for rows.Next() {
		var i Clothing
		if err := rows.Scan(&i.ClothingID, &i.Clothing); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFaces = `-- name: ListFaces :many
SELECT face_id, face FROM face
ORDER BY face
`

func (q *Queries) ListFaces(ctx context.Context) ([]Face, error) {
	rows, err := q.db.QueryContext(ctx, listFaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Face
	for rows.Next() {
		var i Face
		if err := rows.Scan(&i.FaceID, &i.Face); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHair = `-- name: ListHair :many
SELECT hair_id, hair FROM hair
ORDER BY hair
`

func (q *Queries) ListHair(ctx context.Context) ([]Hair, error) {
	rows, err := q.db.QueryContext(ctx, listHair)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hair
	for rows.Next() {
		var i Hair
		if err := rows.Scan(&i.HairID, &i.Hair); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMisfortunes = `-- name: ListMisfortunes :many
SELECT misfortune_id, misfortune FROM misfortune
ORDER BY misfortune
`

func (q *Queries) ListMisfortunes(ctx context.Context) ([]Misfortune, error) {
	rows, err := q.db.QueryContext(ctx, listMisfortunes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Misfortune
	for rows.Next() {
		var i Misfortune
		if err := rows.Scan(&i.MisfortuneID, &i.Misfortune); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPhysiques = `-- name: ListPhysiques :many
SELECT physique_id, physique FROM physique
ORDER BY physique
`

func (q *Queries) ListPhysiques(ctx context.Context) ([]Physique, error) {
	rows, err := q.db.QueryContext(ctx, listPhysiques)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Physique
	for rows.Next() {
		var i Physique
		if err := rows.Scan(&i.PhysiqueID, &i.Physique); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReputations = `-- name: ListReputations :many
SELECT reputation_id, reputation FROM reputation
ORDER BY reputation
`

func (q *Queries) ListReputations(ctx context.Context) ([]Reputation, error) {
	rows, err := q.db.QueryContext(ctx, listReputations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reputation
	for rows.Next() {
		var i Reputation
		if err := rows.Scan(&i.ReputationID, &i.Reputation); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSkin = `-- name: ListSkin :many
SELECT skin_id, skin FROM skin
ORDER BY skin
`

func (q *Queries) ListSkin(ctx context.Context) ([]Skin, error) {
	rows, err := q.db.QueryContext(ctx, listSkin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skin
	for rows.Next() {
		var i Skin
		if err := rows.Scan(&i.SkinID, &i.Skin); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpeech = `-- name: ListSpeech :many
SELECT speech_id, speech FROM speech
ORDER BY speech
`

func (q *Queries) ListSpeech(ctx context.Context) ([]Speech, error) {
	rows, err := q.db.QueryContext(ctx, listSpeech)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Speech
	for rows.Next() {
		var i Speech
		if err := rows.Scan(&i.SpeechID, &i.Speech); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVices = `-- name: ListVices :many
SELECT vice_id, vice FROM vice
ORDER BY vice
`

func (q *Queries) ListVices(ctx context.Context) ([]Vice, error) {
	rows, err := q.db.QueryContext(ctx, listVices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vice
	for rows.Next() {
		var i Vice
		if err := rows.Scan(&i.ViceID, &i.Vice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVirtues = `-- name: ListVirtues :many
SELECT virtue_id, virtue FROM virtue
ORDER BY virtue
`

func (q *Queries) ListVirtues(ctx context.Context) ([]Virtue, error) {
	rows, err := q.db.QueryContext(ctx, listVirtues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Virtue
	for rows.Next() {
		var i Virtue
		if err := rows.Scan(&i.VirtueID, &i.Virtue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
