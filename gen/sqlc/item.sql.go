// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: item.sql

package sqlc

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon
`

type CreateItemParams struct {
	Name        string
	Kind        int64
	Slot        int64
	Description string
	Value       int64
	DiceCount   int64
	DiceSides   int64
	Armor       int64
	Storage     int64
	Size        int64
	ActiveSize  int64
	Stackable   bool
	Icon        string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Name,
		arg.Kind,
		arg.Slot,
		arg.Description,
		arg.Value,
		arg.DiceCount,
		arg.DiceSides,
		arg.Armor,
		arg.Storage,
		arg.Size,
		arg.ActiveSize,
		arg.Stackable,
		arg.Icon,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kind,
		&i.Slot,
		&i.Description,
		&i.Value,
		&i.DiceCount,
		&i.DiceSides,
		&i.Armor,
		&i.Storage,
		&i.Size,
		&i.ActiveSize,
		&i.Stackable,
		&i.Icon,
	)
	return i, err
}

const createItemKind = `-- name: CreateItemKind :one
INSERT INTO item_kinds (
    name
) VALUES (
    ?
)
RETURNING id, name
`

func (q *Queries) CreateItemKind(ctx context.Context, name string) (ItemKind, error) {
	row := q.db.QueryRowContext(ctx, createItemKind, name)
	var i ItemKind
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createItemSlot = `-- name: CreateItemSlot :one
INSERT INTO item_slots (
    name
) VALUES (
    ?
)
RETURNING id, name
`

func (q *Queries) CreateItemSlot(ctx context.Context, name string) (ItemSlot, error) {
	row := q.db.QueryRowContext(ctx, createItemSlot, name)
	var i ItemSlot
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = ?
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const deleteItemKind = `-- name: DeleteItemKind :exec
DELETE FROM item_kinds
WHERE id = ?
`

func (q *Queries) DeleteItemKind(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItemKind, id)
	return err
}

const deleteItemSlot = `-- name: DeleteItemSlot :exec
DELETE FROM item_slots
WHERE id = ?
`

func (q *Queries) DeleteItemSlot(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItemSlot, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kind,
		&i.Slot,
		&i.Description,
		&i.Value,
		&i.DiceCount,
		&i.DiceSides,
		&i.Armor,
		&i.Storage,
		&i.Size,
		&i.ActiveSize,
		&i.Stackable,
		&i.Icon,
	)
	return i, err
}

const getItemFromKindAndName = `-- name: GetItemFromKindAndName :one
SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM item_views
WHERE kind = LOWER(?1) AND name = Lower(?2) LIMIT 1
`

type GetItemFromKindAndNameParams struct {
	Kind string
	Name string
}

func (q *Queries) GetItemFromKindAndName(ctx context.Context, arg GetItemFromKindAndNameParams) (ItemView, error) {
	row := q.db.QueryRowContext(ctx, getItemFromKindAndName, arg.Kind, arg.Name)
	var i ItemView
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kind,
		&i.Slot,
		&i.Description,
		&i.Value,
		&i.DiceCount,
		&i.DiceSides,
		&i.Armor,
		&i.Storage,
		&i.Size,
		&i.ActiveSize,
		&i.Stackable,
		&i.Icon,
	)
	return i, err
}

const getItemFromName = `-- name: GetItemFromName :one
SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM item_views
WHERE name = ? LIMIT 1
`

func (q *Queries) GetItemFromName(ctx context.Context, name string) (ItemView, error) {
	row := q.db.QueryRowContext(ctx, getItemFromName, name)
	var i ItemView
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kind,
		&i.Slot,
		&i.Description,
		&i.Value,
		&i.DiceCount,
		&i.DiceSides,
		&i.Armor,
		&i.Storage,
		&i.Size,
		&i.ActiveSize,
		&i.Stackable,
		&i.Icon,
	)
	return i, err
}

const getItemKind = `-- name: GetItemKind :one
SELECT id, name FROM item_kinds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItemKind(ctx context.Context, id int64) (ItemKind, error) {
	row := q.db.QueryRowContext(ctx, getItemKind, id)
	var i ItemKind
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getItemKindFromString = `-- name: GetItemKindFromString :one
SELECT id, name FROM item_kinds
WHERE name = ? LIMIT 1
`

func (q *Queries) GetItemKindFromString(ctx context.Context, name string) (ItemKind, error) {
	row := q.db.QueryRowContext(ctx, getItemKindFromString, name)
	var i ItemKind
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getItemSlot = `-- name: GetItemSlot :one
SELECT id, name FROM item_slots
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItemSlot(ctx context.Context, id int64) (ItemSlot, error) {
	row := q.db.QueryRowContext(ctx, getItemSlot, id)
	var i ItemSlot
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getItemSlotFromString = `-- name: GetItemSlotFromString :one
SELECT id, name FROM item_slots
WHERE name = ? LIMIT 1
`

func (q *Queries) GetItemSlotFromString(ctx context.Context, name string) (ItemSlot, error) {
	row := q.db.QueryRowContext(ctx, getItemSlotFromString, name)
	var i ItemSlot
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getItemView = `-- name: GetItemView :one
SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM item_views
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItemView(ctx context.Context, id int64) (ItemView, error) {
	row := q.db.QueryRowContext(ctx, getItemView, id)
	var i ItemView
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kind,
		&i.Slot,
		&i.Description,
		&i.Value,
		&i.DiceCount,
		&i.DiceSides,
		&i.Armor,
		&i.Storage,
		&i.Size,
		&i.ActiveSize,
		&i.Stackable,
		&i.Icon,
	)
	return i, err
}

const getRandomItemFromKind = `-- name: GetRandomItemFromKind :one

SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM item_views
WHERE kind = LOWER(?1)
ORDER BY RANDOM() LIMIT 1
`

// SELECT item.* FROM item
// JOIN item_kinds ON item.kind = item_kinds.item_kinds_id
// JOIN item_slots ON item.slot = item_slots.item_slots_id
// WHERE item_kinds.item_kinds = ? AND name = ? LIMIT 1;
func (q *Queries) GetRandomItemFromKind(ctx context.Context, kind string) (ItemView, error) {
	row := q.db.QueryRowContext(ctx, getRandomItemFromKind, kind)
	var i ItemView
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kind,
		&i.Slot,
		&i.Description,
		&i.Value,
		&i.DiceCount,
		&i.DiceSides,
		&i.Armor,
		&i.Storage,
		&i.Size,
		&i.ActiveSize,
		&i.Stackable,
		&i.Icon,
	)
	return i, err
}

const listItemKinds = `-- name: ListItemKinds :many
SELECT id, name FROM item_kinds
ORDER BY name
`

func (q *Queries) ListItemKinds(ctx context.Context) ([]ItemKind, error) {
	rows, err := q.db.QueryContext(ctx, listItemKinds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemKind
	for rows.Next() {
		var i ItemKind
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemSlots = `-- name: ListItemSlots :many
SELECT id, name FROM item_slots
ORDER BY name
`

func (q *Queries) ListItemSlots(ctx context.Context) ([]ItemSlot, error) {
	rows, err := q.db.QueryContext(ctx, listItemSlots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemSlot
	for rows.Next() {
		var i ItemSlot
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many

SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM item_views
ORDER BY kind, name
`

// SELECT item.* FROM item
// JOIN item_kinds ON item.kind = item_kinds.item_kinds_id
// WHERE item_kinds.item_kinds = ?
// ORDER BY RANDOM() LIMIT 1;
func (q *Queries) ListItems(ctx context.Context) ([]ItemView, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemView
	for rows.Next() {
		var i ItemView
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Kind,
			&i.Slot,
			&i.Description,
			&i.Value,
			&i.DiceCount,
			&i.DiceSides,
			&i.Armor,
			&i.Storage,
			&i.Size,
			&i.ActiveSize,
			&i.Stackable,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsForKind = `-- name: ListItemsForKind :many
SELECT id, name, kind, slot, description, value, dice_count, dice_sides, armor, storage, size, active_size, stackable, icon FROM item_views
WHERE kind = LOWER(?1)
ORDER BY name
`

func (q *Queries) ListItemsForKind(ctx context.Context, kind string) ([]ItemView, error) {
	rows, err := q.db.QueryContext(ctx, listItemsForKind, kind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemView
	for rows.Next() {
		var i ItemView
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Kind,
			&i.Slot,
			&i.Description,
			&i.Value,
			&i.DiceCount,
			&i.DiceSides,
			&i.Armor,
			&i.Storage,
			&i.Size,
			&i.ActiveSize,
			&i.Stackable,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
set name = ?,
kind = ?,
slot = ?,
description = ?,
value = ?,
dice_count = ?,
dice_sides = ?,
armor = ?,
storage = ?,
size = ?,
active_size = ?,
stackable = ?,
icon = ?
WHERE id = ?
`

type UpdateItemParams struct {
	Name        string
	Kind        int64
	Slot        int64
	Description string
	Value       int64
	DiceCount   int64
	DiceSides   int64
	Armor       int64
	Storage     int64
	Size        int64
	ActiveSize  int64
	Stackable   bool
	Icon        string
	ID          int64
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.Name,
		arg.Kind,
		arg.Slot,
		arg.Description,
		arg.Value,
		arg.DiceCount,
		arg.DiceSides,
		arg.Armor,
		arg.Storage,
		arg.Size,
		arg.ActiveSize,
		arg.Stackable,
		arg.Icon,
		arg.ID,
	)
	return err
}
