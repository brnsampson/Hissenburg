// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"
)

const createParty = `-- name: CreateParty :one
INSERT INTO parties (
    name, description, inventory
) VALUES (
    ?, ?, NULL
)
RETURNING id, name, description, inventory
`

type CreatePartyParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateParty(ctx context.Context, arg CreatePartyParams) (Party, error) {
	row := q.db.QueryRowContext(ctx, createParty, arg.Name, arg.Description)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Inventory,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name
) VALUES (
    ?
)
RETURNING id, name
`

func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createVillage = `-- name: CreateVillage :one
INSERT INTO villages (
    name
) VALUES (
    ?
)
RETURNING id, name
`

func (q *Queries) CreateVillage(ctx context.Context, name string) (Village, error) {
	row := q.db.QueryRowContext(ctx, createVillage, name)
	var i Village
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteParty = `-- name: DeleteParty :exec
DELETE FROM parties
WHERE id = ?
`

func (q *Queries) DeleteParty(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteParty, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteVillage = `-- name: DeleteVillage :exec
DELETE FROM villages
WHERE id = ?
`

func (q *Queries) DeleteVillage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVillage, id)
	return err
}

const getParty = `-- name: GetParty :one
SELECT id, name, description, inventory FROM parties
WHERE id = ? LIMIT 1
`

func (q *Queries) GetParty(ctx context.Context, id int64) (Party, error) {
	row := q.db.QueryRowContext(ctx, getParty, id)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Inventory,
	)
	return i, err
}

const getPartyFromName = `-- name: GetPartyFromName :one
SELECT id, name, description, inventory FROM parties
WHERE name = ? LIMIT 1
`

func (q *Queries) GetPartyFromName(ctx context.Context, name string) (Party, error) {
	row := q.db.QueryRowContext(ctx, getPartyFromName, name)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Inventory,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserFromName = `-- name: GetUserFromName :one
SELECT id, name FROM users
WHERE name = ? LIMIT 1
`

func (q *Queries) GetUserFromName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromName, name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getVillage = `-- name: GetVillage :one
SELECT id, name FROM villages
WHERE id = ?
`

func (q *Queries) GetVillage(ctx context.Context, id int64) (Village, error) {
	row := q.db.QueryRowContext(ctx, getVillage, id)
	var i Village
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getVillageFromName = `-- name: GetVillageFromName :one
SELECT id, name FROM villages
WHERE name = ?
`

func (q *Queries) GetVillageFromName(ctx context.Context, name string) (Village, error) {
	row := q.db.QueryRowContext(ctx, getVillageFromName, name)
	var i Village
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listParties = `-- name: ListParties :many
SELECT id, name, description, inventory FROM parties
ORDER BY name
`

func (q *Queries) ListParties(ctx context.Context) ([]Party, error) {
	rows, err := q.db.QueryContext(ctx, listParties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Party
	for rows.Next() {
		var i Party
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Inventory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVillages = `-- name: ListVillages :many
SELECT id, name FROM villages
ORDER BY name
`

func (q *Queries) ListVillages(ctx context.Context) ([]Village, error) {
	rows, err := q.db.QueryContext(ctx, listVillages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Village
	for rows.Next() {
		var i Village
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParty = `-- name: UpdateParty :exec
UPDATE parties
set name = ?
WHERE id = ?
`

type UpdatePartyParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateParty(ctx context.Context, arg UpdatePartyParams) error {
	_, err := q.db.ExecContext(ctx, updateParty, arg.Name, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set name = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.ID)
	return err
}

const updateVillage = `-- name: UpdateVillage :exec
UPDATE villages
set name = ?
WHERE id = ?
`

type UpdateVillageParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateVillage(ctx context.Context, arg UpdateVillageParams) error {
	_, err := q.db.ExecContext(ctx, updateVillage, arg.Name, arg.ID)
	return err
}
