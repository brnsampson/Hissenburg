// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: identity.sql

package sqlc

import (
	"context"
)

const createBackground = `-- name: CreateBackground :one
INSERT INTO backgrounds (
    title, description, image
) VALUES (
    ?, ?, ?
)
RETURNING id, title, description, image
`

type CreateBackgroundParams struct {
	Title       string
	Description string
	Image       string
}

func (q *Queries) CreateBackground(ctx context.Context, arg CreateBackgroundParams) (Background, error) {
	row := q.db.QueryRowContext(ctx, createBackground, arg.Title, arg.Description, arg.Image)
	var i Background
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
	)
	return i, err
}

const createGender = `-- name: CreateGender :one
INSERT INTO genders (
    gender
) VALUES (
    ?
)
RETURNING id, gender
`

func (q *Queries) CreateGender(ctx context.Context, gender string) (Gender, error) {
	row := q.db.QueryRowContext(ctx, createGender, gender)
	var i Gender
	err := row.Scan(&i.ID, &i.Gender)
	return i, err
}

const createName = `-- name: CreateName :one
INSERT INTO names (
    name
) VALUES (
    ?
)
RETURNING id, name
`

func (q *Queries) CreateName(ctx context.Context, name string) (Name, error) {
	row := q.db.QueryRowContext(ctx, createName, name)
	var i Name
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createSurname = `-- name: CreateSurname :one
INSERT INTO surnames (
    surname
) VALUES (
    ?
)
RETURNING id, surname
`

func (q *Queries) CreateSurname(ctx context.Context, surname string) (Surname, error) {
	row := q.db.QueryRowContext(ctx, createSurname, surname)
	var i Surname
	err := row.Scan(&i.ID, &i.Surname)
	return i, err
}

const deleteBackground = `-- name: DeleteBackground :exec
DELETE FROM backgrounds
WHERE id = ?
`

func (q *Queries) DeleteBackground(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBackground, id)
	return err
}

const deleteGender = `-- name: DeleteGender :exec
DELETE FROM genders
WHERE id = ?
`

func (q *Queries) DeleteGender(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGender, id)
	return err
}

const deleteName = `-- name: DeleteName :exec
DELETE FROM names
WHERE id = ?
`

func (q *Queries) DeleteName(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteName, id)
	return err
}

const deleteNameGender = `-- name: DeleteNameGender :exec

DELETE FROM name_genders
WHERE id = ?
`

// SELECT name.name_id, genders.genders_id FROM name
// CROSS JOIN genders
// WHERE genders.genders = "Female" AND name.name = ?
// RETURNING *;
func (q *Queries) DeleteNameGender(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNameGender, id)
	return err
}

const deleteNameGenderByValue = `-- name: DeleteNameGenderByValue :exec
DELETE FROM name_genders
WHERE name = ? AND gender = ?
`

type DeleteNameGenderByValueParams struct {
	Name   int64
	Gender int64
}

func (q *Queries) DeleteNameGenderByValue(ctx context.Context, arg DeleteNameGenderByValueParams) error {
	_, err := q.db.ExecContext(ctx, deleteNameGenderByValue, arg.Name, arg.Gender)
	return err
}

const deleteSurname = `-- name: DeleteSurname :exec
DELETE FROM surnames
WHERE id = ?
`

func (q *Queries) DeleteSurname(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSurname, id)
	return err
}

const getBackground = `-- name: GetBackground :one
SELECT id, title, description, image FROM backgrounds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBackground(ctx context.Context, id int64) (Background, error) {
	row := q.db.QueryRowContext(ctx, getBackground, id)
	var i Background
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
	)
	return i, err
}

const getBackgroundFromTitle = `-- name: GetBackgroundFromTitle :one
SELECT id, title, description, image FROM backgrounds
WHERE title = ? LIMIT 1
`

func (q *Queries) GetBackgroundFromTitle(ctx context.Context, title string) (Background, error) {
	row := q.db.QueryRowContext(ctx, getBackgroundFromTitle, title)
	var i Background
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
	)
	return i, err
}

const getGender = `-- name: GetGender :one
SELECT id, gender FROM genders
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGender(ctx context.Context, id int64) (Gender, error) {
	row := q.db.QueryRowContext(ctx, getGender, id)
	var i Gender
	err := row.Scan(&i.ID, &i.Gender)
	return i, err
}

const getName = `-- name: GetName :one
SELECT id, name FROM names
WHERE id = ? LIMIT 1
`

func (q *Queries) GetName(ctx context.Context, id int64) (Name, error) {
	row := q.db.QueryRowContext(ctx, getName, id)
	var i Name
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRandomBackground = `-- name: GetRandomBackground :one
SELECT id, title, description, image FROM backgrounds
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomBackground(ctx context.Context) (Background, error) {
	row := q.db.QueryRowContext(ctx, getRandomBackground)
	var i Background
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
	)
	return i, err
}

const getRandomFeminineName = `-- name: GetRandomFeminineName :one
SELECT names.id, names.name FROM name_genders
INNER JOIN genders ON name_genders.genders == genders.id
INNER JOIN names ON name_genders.name == names.id
WHERE genders.gender = "Female"
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomFeminineName(ctx context.Context) (Name, error) {
	row := q.db.QueryRowContext(ctx, getRandomFeminineName)
	var i Name
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRandomGender = `-- name: GetRandomGender :one
SELECT id, gender FROM genders
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomGender(ctx context.Context) (Gender, error) {
	row := q.db.QueryRowContext(ctx, getRandomGender)
	var i Gender
	err := row.Scan(&i.ID, &i.Gender)
	return i, err
}

const getRandomMasculineName = `-- name: GetRandomMasculineName :one
SELECT names.id, names.name FROM name_genders
INNER JOIN genders ON name_genders.gender == genders.id
INNER JOIN names ON name_genders.name == names.id
WHERE genders.gender = "Male"
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomMasculineName(ctx context.Context) (Name, error) {
	row := q.db.QueryRowContext(ctx, getRandomMasculineName)
	var i Name
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRandomName = `-- name: GetRandomName :one
SELECT id, name FROM names
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomName(ctx context.Context) (Name, error) {
	row := q.db.QueryRowContext(ctx, getRandomName)
	var i Name
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRandomSurname = `-- name: GetRandomSurname :one
SELECT id, surname FROM surnames
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomSurname(ctx context.Context) (Surname, error) {
	row := q.db.QueryRowContext(ctx, getRandomSurname)
	var i Surname
	err := row.Scan(&i.ID, &i.Surname)
	return i, err
}

const getSurname = `-- name: GetSurname :one
SELECT id, surname FROM surnames
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSurname(ctx context.Context, id int64) (Surname, error) {
	row := q.db.QueryRowContext(ctx, getSurname, id)
	var i Surname
	err := row.Scan(&i.ID, &i.Surname)
	return i, err
}

const listBackgrounds = `-- name: ListBackgrounds :many
SELECT id, title, description, image FROM backgrounds
ORDER BY title
`

func (q *Queries) ListBackgrounds(ctx context.Context) ([]Background, error) {
	rows, err := q.db.QueryContext(ctx, listBackgrounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Background
	for rows.Next() {
		var i Background
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeminineNames = `-- name: ListFeminineNames :many
SELECT names.name FROM name_genders
INNER JOIN genders ON name_genders.genders == genders.id
INNER JOIN names ON name_genders.name == names.id
WHERE genders.gender = "Female"
ORDER BY names.name
`

func (q *Queries) ListFeminineNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listFeminineNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGenders = `-- name: ListGenders :many
SELECT id, gender FROM genders
ORDER BY genders
`

func (q *Queries) ListGenders(ctx context.Context) ([]Gender, error) {
	rows, err := q.db.QueryContext(ctx, listGenders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gender
	for rows.Next() {
		var i Gender
		if err := rows.Scan(&i.ID, &i.Gender); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasculineNames = `-- name: ListMasculineNames :many
SELECT names.name FROM name_genders
INNER JOIN genders ON name_genders.genders == genders.id
INNER JOIN names ON name_genders.name == names.id
WHERE genders.gender = "Male"
ORDER BY names.name
`

func (q *Queries) ListMasculineNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listMasculineNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNames = `-- name: ListNames :many
SELECT id, name FROM names
ORDER BY genders, name
`

func (q *Queries) ListNames(ctx context.Context) ([]Name, error) {
	rows, err := q.db.QueryContext(ctx, listNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Name
	for rows.Next() {
		var i Name
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurnames = `-- name: ListSurnames :many
SELECT id, surname FROM surnames
ORDER BY surnames
`

func (q *Queries) ListSurnames(ctx context.Context) ([]Surname, error) {
	rows, err := q.db.QueryContext(ctx, listSurnames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Surname
	for rows.Next() {
		var i Surname
		if err := rows.Scan(&i.ID, &i.Surname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeNameFeminine = `-- name: MakeNameFeminine :one
WITH g AS (SELECT * FROM genders WHERE gender = "Female"),
    n AS (SELECT * FROM names WHERE name = "?")
INSERT INTO name_genders (
    name, gender
) VALUES (
    n.id, g.id
)
RETURNING id, name, gender
`

func (q *Queries) MakeNameFeminine(ctx context.Context) (NameGender, error) {
	row := q.db.QueryRowContext(ctx, makeNameFeminine)
	var i NameGender
	err := row.Scan(&i.ID, &i.Name, &i.Gender)
	return i, err
}

const makeNameMasculine = `-- name: MakeNameMasculine :one
WITH g AS (SELECT * FROM genders WHERE gender = "Male"),
    n AS (SELECT * FROM names WHERE name = "?")
INSERT INTO name_genders (
    name, gender
) VALUES (
    n.id, g.id
)
RETURNING id, name, gender
`

func (q *Queries) MakeNameMasculine(ctx context.Context) (NameGender, error) {
	row := q.db.QueryRowContext(ctx, makeNameMasculine)
	var i NameGender
	err := row.Scan(&i.ID, &i.Name, &i.Gender)
	return i, err
}
